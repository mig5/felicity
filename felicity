#! /usr/bin/env python

from libcloud.types import Provider 
from libcloud.providers import get_driver 
from libcloud.deployment import MultiStepDeployment, ScriptDeployment, SSHKeyDeployment 
from libcloud.ssh import SSHClient, ParamikoSSHClient
from random import choice
import paramiko
from paramiko.rsakey import RSAKey
import os
import random
import sys
import ConfigParser

ssh = 0
# Fetch some values from the config file
config = ConfigParser.RawConfigParser()
config.read('config/felicity.ini')

# Try to abstract the provider here
provider = config.get('Felicity', 'provider')
provider_driver = config.get(provider, 'driver')

user = config.get(provider, 'user')
key = config.get(provider, 'key')

config_distro = config.get(provider, 'distro')
config_size = config.get(provider, 'size')

email = config.get('Felicity', 'email')
server = sys.argv[1]
hostname = 'backup-restore-"%s"%d' % tuple([server, random.randrange(0, 101, 2)])

def ssh_connect(remote_host):
        rsa_key = os.path.expanduser('~/.ssh/id_rsa')
        mykey = paramiko.RSAKey.from_private_key_file(rsa_key)
	global ssh
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.load_system_host_keys()
        ssh.connect(remote_host, username='root', pkey=mykey)

def ssh_close():
	ssh.close()

def deploy_customisations():
	# Setting self-destruct for 48 hours
	ssh.exec_command('echo "halt" | at now + 2 days')

	# Disabling password authentication in SSH
	ssh.exec_command('sed -i -r -e "s/^[ #]*(PasswordAuthentication).*/\1 no/" /etc/ssh/sshd_config')
	ssh.exec_command('/etc/init.d/ssh restart')

	# Setting a firewall
	ssh.exec_command('/usr/local/bin/firewall start')
	
def deploy_scripts():
	# Open an SFTP connection for transferring files
        ftp = ssh.open_sftp()

        scripts = ['backup_restore_wrapper', 'backup_restore', 'backup_list_buckets', 'firewall']
	for script in scripts:
        	ftp.put(os.path.expanduser('scripts/' + script), '/usr/local/bin/' + script)
		script_file = ftp.open('/usr/local/bin/' + script, 'r')
		script_file.chmod(0755)
		script_file.close()

	configs = ['backup_restore_creds']
	for config in configs:
		ftp.put(os.path.expanduser('config/' + config), '/usr/local/etc/' + config)

	ftp.close()

def run_script():
	# Preparing restore script to run
	ssh.exec_command('echo "/usr/local/bin/backup_restore_wrapper %s %s" | at now + 1 minute' % tuple([ server, email]))

def main():
	# Make a new connection
	Driver = get_driver( getattr(Provider, provider_driver) )
	conn = Driver(user, key)

	# Get a list of the available images and sizes
	images = conn.list_images()
	sizes = conn.list_sizes()

	# We'll use the distro and size from the config ini
	preferred_image = [image for image in images if config_distro in image.name]
	assert len(preferred_image) == 1, "We found more than one image for %s, will be assuming the first one" % config_distro

	preferred_size = [size for size in sizes if config_size in size.name]

	dispatch = [ 
		SSHKeyDeployment(open(os.path.expanduser("~/.ssh/id_rsa.pub")).read()),
		ScriptDeployment("echo 'deb http://www.backports.org/debian lenny-backports main contrib non-free' >> /etc/apt/sources.list"),
		ScriptDeployment("apt-get update"),
		ScriptDeployment("apt-get -y -t lenny-backports install duplicity"),
		ScriptDeployment("echo 'postfix postfix/main_mailer_type select Internet Site' | debconf-set-selections"),
		ScriptDeployment("echo 'postfix postfix/mailname string $HOSTNAME' | debconf-set-selections"),
		ScriptDeployment("echo 'postfix postfix/destinations string localhost.localdomain, localhost' | debconf-set-selections"),
		ScriptDeployment("apt-get -y install postfix mailx python-boto at")
	]
	msd = MultiStepDeployment(dispatch) 

	# Create and deploy a new server now, and run the deployment steps defined above
	print "Provisioning server and running deployment processes"
	node = conn.deploy_node(name=hostname, image=preferred_image[0], size=preferred_size[0], deploy=msd)

	# This is the public IP of the new server that will be used for further steps
	remote_host = node.public_ip[0]

	# Connect to the new server
	print "Connecting to %s" % remote_host
	ssh_connect(remote_host)

	# Deploy our scripts
	print "Uploading scripts"
	deploy_scripts()

        # Make some customisations to the server
        print "Securing SSH, setting a firewall and self-destruct for 48 hours"
        deploy_customisations()

	# Run the backup restore script
	print "Executing the backup restore script"
	run_script()

	# End the SSH session
	print "Closing SSH session"
	ssh_close()


if __name__ == "__main__":
	main()
