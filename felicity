#! /usr/bin/env python

from libcloud.types import Provider 
from libcloud.providers import get_driver 
from libcloud.deployment import MultiStepDeployment, ScriptDeployment, SSHKeyDeployment 
from libcloud.ssh import SSHClient, ParamikoSSHClient
from random import choice
import paramiko
from paramiko.rsakey import RSAKey
import os
import random
import sys
import ConfigParser

hostname = 'backup-restore-"%s"%d' % tuple([sys.argv[1], random.randrange(0, 101, 2)])
ssh = 0

def ssh_connect(remote_host):
        rsa_key = os.path.expanduser('~/.ssh/id_rsa')
        mykey = paramiko.RSAKey.from_private_key_file(rsa_key)
	global ssh
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.load_system_host_keys()
	print "Connecting via SSH to %s" % remote_host
        ssh.connect(remote_host, username='root', pkey=mykey)

def ssh_close():
	print "Closing SSH connection"
	ssh.close()

def run_script():
	print "Preparing restore script to run"
	ssh.exec_command('echo "/usr/local/bin/backup_restore_wrapper %s %s" | at now + 1 minute' % tuple([ sys.argv[1], sys.argv[2]]))
	print "Setting self-destruct for 48 hours"
        ssh.exec_command('echo "halt" | at now + 2 days')
	print "Disabling password authentication in SSH"
	ssh.exec_command('sed -i -r -e "s/^[ #]*(PasswordAuthentication).*/\1 no/" /etc/ssh/sshd_config')
	ssh.exec_command('/etc/init.d/ssh restart')
	print "Setting a firewall"
	ssh.exec_command('update-rc.d /etc/init.d/firewall defaults')
	ssh.exec_command('/etc/init.d/firewall start')

def deploy_script():
        ftp = ssh.open_sftp()
	print "Uploading scripts"	
        ftp.put(os.path.expanduser('scripts/backup_restore_wrapper'), '/usr/local/bin/backup_restore_wrapper')
        ftp.put(os.path.expanduser('scripts/backup_restore'), '/usr/local/bin/backup_restore')
        ftp.put(os.path.expanduser('scripts/backup_list_buckets'), '/usr/local/bin/backup_list_buckets')
	ftp.put(os.path.expanduser('config/backup_restore_creds'), '/usr/local/etc/backup_restore_creds')
	ftp.put(os.path.expanduser('scripts/firewall'), '/etc/init.d/firewall')

	scripts = ['/usr/local/bin/backup_restore_wrapper', '/usr/local/bin/backup_restore', '/usr/local/bin/backup_list_buckets', '/etc/init.d/firewall']
	for script in scripts:
		script_file = ftp.open(script, 'r')
		script_file.chmod(0755)
		script_file.close()
	ftp.close()

def main():

	config = ConfigParser.RawConfigParser()
	config.read('config/felicity.ini')
	user = config.get('Rackspace', 'user')
	key = config.get('Rackspace', 'key')
	distro = config.get('Rackspace', 'distro')

	Driver = get_driver(Provider.RACKSPACE) 
	conn = Driver(user, key)

	images = conn.list_images()
	sizes = conn.list_sizes()

	dist_image = [image for image in images if distro in image.name]
	assert len(dist_image) == 1, "We found more than one image for %s, will be assuming the first one" % distro

	cmd1 = SSHKeyDeployment(open(os.path.expanduser("~/.ssh/id_rsa.pub")).read())
	cmd2 = ScriptDeployment("echo 'deb http://www.backports.org/debian lenny-backports main contrib non-free' >> /etc/apt/sources.list")
	cmd3 = ScriptDeployment("apt-get update")
	cmd4 = ScriptDeployment("apt-get -y -t lenny-backports install duplicity")
	cmd5 = ScriptDeployment("apt-get -y install python-boto")
	cmd6 = ScriptDeployment("echo 'postfix postfix/main_mailer_type select Internet Site' | debconf-set-selections")
	cmd7 = ScriptDeployment("echo 'postfix postfix/mailname string $HOSTNAME' | debconf-set-selections")
	cmd8 = ScriptDeployment("echo 'postfix postfix/destinations string localhost.localdomain, localhost' | debconf-set-selections")
	cmd9 = ScriptDeployment("apt-get -y install postfix mailx")
	cmd10 = ScriptDeployment("apt-get install at")
	msd = MultiStepDeployment([cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, cmd7, cmd8, cmd9, cmd10]) 

	print "Provisioning server and running deployment processes"
	node = conn.deploy_node(name=hostname, image=dist_image[0], size=sizes[0], deploy=msd)

	remote_host = node.public_ip[0]

	ssh_connect(remote_host)

	deploy_script()

	run_script()

	ssh_close()


if __name__ == "__main__":
	main()
